'''Системный администратор раз в неделю создаёт архив пользовательских файлов. 
Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. 
Известно, какой объём занимает файл каждого пользователя.

По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите 
максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, 
который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.

Входные данные.

В первой строке входного файла находятся два числа: S  — размер свободного места на диске 
(натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 1000). 
В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, 
не превышающие 100), каждое в отдельной строке.

Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, 
затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, 
что сохранены файлы максимально возможного числа пользователей.

Пример входного файла:

100 4
80
30
50
40

30 50 = 80
2 50

При таких исходных данных можно сохранить файлы максимум двух пользователей. 
Возможные объёмы этих двух файлов — 30 и 40, 30 и 50 или 40 и 50. 
Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:

2 50

8200 970
[30, 40, 50, 80]
'''

f = open('26.txt').readlines()

sp = []

for i in f:
    sp.append(int(i))

s = 8200
k = 970

sp.sort()

ob_s = []

for i in sp:
    if sum(ob_s) + i <= s:
        ob_s.append(i)
    elif sum(ob_s[:-1]) + i <= s:
        del ob_s[-1]
        ob_s.append(i)

print(sum(ob_s), max(ob_s))



'''В магазине для упаковки подарков есть N кубических коробок. 
Самой интересной считается упаковка подарка по принципу матрёшки — подарок упаковывается в одну из коробок, 
та в свою очередь в другую коробку и т. д. Одну коробку можно поместить в другую, 
если длина её стороны хотя бы на 3 единицы меньше длины стороны другой коробки.

Определите наибольшее количество коробок, которое можно использовать для упаковки одного подарка, 
и максимально возможную длину стороны самой маленькой коробки, где будет находиться подарок. 
Размер подарка позволяет поместить его в самую маленькую коробку.

Входные данные.

В первой строке входного файла находится число N — количество коробок в магазине 
(натуральное число, не превышающее 10 000). В следующих N строках находятся значения длин сторон коробок 
(все числа натуральные, не превышающие 10 000), каждое — в отдельной строке.

Запишите в ответе два целых числа: сначала наибольшее количество коробок, 
которое можно использовать для упаковки одного подарка, 
затем максимально возможную длину стороны самой маленькой коробки в таком наборе.

Пример входного файла:

5
43
40
32
40
30

Пример входного файла приведён для пяти коробок и случая, когда минимальная допустимая разница между 
длинами сторон коробок, подходящих для упаковки «матрёшкой», составляет 3 единицы.

При таких исходных данных условию задачи удовлетворяют наборы коробок с длинами сторон 30, 40 и 43 или 32, 
40 и 43 соответственно, то есть количество коробок равно 3, а длина стороны самой маленькой коробки равна 32.
10000
       i
ob = [43, 40, 40, 32, 30]

m = [43]

m[-1] - i >= 3
'''

f=open("26.txt").readlines()
od=[]
for i in f:
    od.append(int(i))
od.sort(reverse=True)
kr = [max(od)]
for o in od:
    if kr[-1] - o >=3:
        kr.append(o)
print(len(kr), min(kr))


'''5
Системный администратор раз в неделю создаёт архив пользовательских файлов. 
Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. 
Известно, какой объём занимает файл каждого пользователя.

По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите 
максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, 
который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.

Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, 
затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, 
что сохранены файлы максимально возможного числа пользователей.
S    N
543 2358
'''

f=open("26.txt").readlines()
gt=[]
tg=[]
for i in f:
    gt.append(int(i))

gt.sort()
for n in gt:
    if sum(tg)+n <=543:
        tg.append(n)
print(len(tg), max(tg))



'''В аэропорту есть камера хранения из K ячеек, которые пронумерованы с 1.

Принимаемый багаж кладется в свободную ячейку с минимальным номером. Известно время, 
когда пассажиры сдают и забирают багаж (в минутах с начала суток). 
Ячейка доступна для багажа, начиная со следующей минуты, после окончания срока хранения. 
Если свободных ячеек не находится, то багаж не принимается в камеру хранения.

Найдите количество багажей, которое будет сдано в камеры за 24 часа и номер ячейки, 
в которую сдаст багаж последний пассажир.

Входные данные.

В первой строке входного файла находится число K — 
количество ячеек в камере хранения, во второй строке файла число 
N — количество пассажиров, сдающих багаж (натуральное число, не превышающее 1000). 
Каждая из следующих N строк содержит два натуральных числа, не превышающих 1440: 
время сдачи багажа и время выдачи багажа.

Выходные данные.

Программа должна вывести два числа: количество сданных в камеру хранения багажей и номер ячейки, 
в которую примут багаж у последнего пассажира, который сможет сдать багаж.

[[30, 1000], [60, 100], [61, 1100], [1010, 1440]]

[1000, 100]
'''
f = open('26.txt').readlines()[2:]

k = 210
n = 600
c=0
bags=[]
for i in f:
    b, b1=map(int,i.split())
    bags.append([b, b1])

bags.sort()

places = [0] * k

last_place = 0

for i in range(len(bags)):
    for j in range(len(places)):
        if places[j] == 0:
            places[j] = bags[i][1]
            c+=1
            last_place = j+1
            break
        if bags[i][0] >= places[j]+1:
            places[j] = bags[i][1]
            c+=1
            last_place = j+1
            break

print(c, last_place)




'''Организация купила для своих сотрудников все места в нескольких подряд идущих рядах на концертной площадке. 
Известно, какие места уже распределены между сотрудниками. 
Найдите ряд с наибольшим номером, в котором есть два соседних места, 
таких что слева и справа от них в том же ряду места уже распределены (заняты). 
Гарантируется, что есть хотя бы один ряд, удовлетворяющий условию. 
В ответе запишите два целых числа: номер ряда и наименьший номер места из найденных в этом ряду подходящих пар.

Входные данные.

Задание 26

В первой строке входного файла находится одно число: N  — количество занятых мест 
(натуральное число, не превышающее 10 000). В следующих N строках находятся пары чисел: 
ряд и место выкупленного билета (числа не превышают 100 000).

В ответе запишите два целых числа: сначала максимальный номер ряда, 
где нашлись обозначенные в задаче места и минимальный номер места.

Пример входного файла:

6
50 12
50 15
60 157
60 160
60 22
60 25
60 26
60 30

Для данного примера ответом будет являться пара чисел 60 и 23

50   12 _ _ 15
60   22 _ _ 25 26 _ _ _ 30              157 _ _ 160


[
    [50, 12],
    [50, 15],
    [60, 22],
    [60, 25],
    [60, 26],
    [60, 30],
    [60, 157],
    [60, 160],
]
10000
'''

f=open("26.txt").readlines()

a=[]
for i in f:
    a.append(list(map(int, i.split())))

a.sort()
b=[]

for i in range (len(a)-1):
    if a[i][0] == a[i+1][0]:
      if a[i+1][1]-a[i][1] == 3:
        b.append([a[i][0], a[i+1][1]-2])
print(b)

# 8631, 7311




'''Задание выполняется с использованием прилагаемых файлов.

В супермаркете проводится акция «каждый третий товар бесплатно». 
Покупатель, чтобы максимально использовать условие акции, разделил на ленте товары группами по три товара, 
собираясь заплатить за каждую группу отдельным чеком. 
В каждой группе из трех товаров самый дорогой он поместил на третье место.

Однако выяснилось, что программа для кассового аппарата не учитывает расположение товаров на ленте и 
сортирует цены товаров в чеке таким образом, чтобы стоимость покупки была максимально возможной. 
Тогда покупатель разместил товары по-⁠другому.

Входные данные.
Первая строка входного файла содержит число N — количество товаров, 
которые планирует приобрести покупатель (натуральное число, не превышающее 10 000).
Каждая из последующих N строк содержит цены товаров, которые выбирал покупатель (все числа натуральные, 
не превышающие 10 000, каждое в отдельной строке).

Цены товаров указаны в произвольном порядке.

Выходные данные.
В ответе запишите два целых числа: сначала минимальную цену, которую планировал заплатить покупатель изначально, 
если бы бесплатным был 3-⁠й товар в любой покупке, состоящей из 3 предметов. 
А затем запишите цену, которую он заплатил.

Покупатель делит товары на группы наиболее выгодным для себя способом.

Типовой пример входных данных:

4
80
30
50
40

30 40 50 '80'               # len = 4  np = 1
30 40 50 60 '80 90'         # len = 6  np = 2
30 35 40 50 60 70 80 90 100   # len = 9  np = 3

30 35 80

80 35 30

При таких исходных данных, если каждый третий товар бесплатно, 
предполагаемая и действительная суммы равны 120 и 160.

 0   1   2   3   4   5   6   7    8
[30, 35, 40, 50, 60, 70, 80, 90, 100]



30 40 50 60 80 90 

40 30 50  = 50 + 40 = 90
60 80 90  = 90 + 80 = 170 


30 40 50 80 

0  1  2  3  4  5
80 50 40 30 25 15 10

30 40 50 = 50 + 40 = 90
80       = 80

40 50 80 = 80 + 50
30       = 30

'''

f=open("26.txt").readlines()

a = list(map(int, f))
a.sort()
c = a
# Самое выгодное для покупателя
n=len(a)//3
a=a[:-n]
s=sum(a)
print(s)

# Выгодное для кассы
c=c[::-1]
b=c[2::3]
s= sum(c)-sum(b)
print(s)



'''В текстовом файле записан набор натуральных чисел, не превышающих 10^9. Гарантируется, что все числа различны. 
Необходимо определить, сколько в наборе таких пар чисел, что числа в паре имеют одинаковую чётность, 
а их сумма тоже присутствует в файле, и чему равна наибольшая из сумм таких пар.

Входные данные.

Первая строка входного файла содержит целое число N — общее количество чисел в наборе. Каждая из следующих N 
строк содержит одно число.
В ответе запишите два целых числа: сначала количество пар, затем наибольшую сумму.

Пример входного файла:


3   
8   
14  
11  
22  
17  
 
В данном случае есть две подходящие пары: 3 и 11 (сумма 14), 8 и 14 (сумма 22). В ответе надо записать числа 2 и 22.

Ответ: 10 933100556.
'''

f=open("26.txt").readlines()[1:]
f = [int(i) for i in f]
f.sort()
n=[]
for i in range(len(f)):
    for j in range(i+1,len(f)):
        b=f[i]+f[j]
        if f[i]%2==f[j]%2 and b in f:
            n.append(f[i]+f[j])
print(len(n),max(n))



"""B магазине для упаковки подарков есть N кубических коробок. Самой интересной считается упаковка подарка по принципу матрёшки —
подарок упаковывается в одну из коробок, та в свою очередь в другую коробку и т. д. Одну коробку можно поместить в другую, если длина
её стороны хотя бы на 3 единицы меньше длины стороны другой коробки.

Определите наибольшее количество коробок, которое можно использовать для упаковки одного подарка, и максимально возможную длину стороны
самой маленькой коробки, где будет находиться подарок. Размер подарка позволяет поместить его в самую маленькую коробку.

Входные данные.

B первой строке входного файла находится число N — количество коробок в магазине (натуральное число, не превышающее 10 000).
B следующих N строках находятся значения длин сторон коробок (все числа натуральные, не превышающие 10 000), каждое — в отдельной строке.

Запишите в ответе два целых числа: сначала наибольшее количество коробок, которое можно использовать для упаковки одного подарка,
затем максимально возможную длину стороны самой маленькой коробки в таком наборе.

Пример входного файла:

5
43
40
32
40
30


b = [50, 43]
"""

f = open("26.txt").readlines()


f = sorted([int(i) for i in f], reverse=True)


b = [f[0]]


for i in f:
    if b[-1] - i >= 3:
        b.append(i)

print(len(b))

# 2767 51