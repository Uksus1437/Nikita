def delit(x):
    m=set()
    for n in range(1, int(x**0.5)+1):
        if x%n==0:
            m.add(n)
            m.add(x//n)
    return m


'''Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [174457; 174505], 
числа, имеющие ровно два различных натуральных делителя, не считая единицы и самого числа. 
Для каждого найденного числа запишите эти два делителя в два соседних столбца на экране 
с новой строки в порядке возрастания произведения этих двух делителей. 
Делители в строке также должны следовать в порядке возрастания.

1  4   8      16

[1, 2, 4, 8, 16]

1..4

1   16//1 = 16
2   16//2 = 8
4   16//4 = 4
'''


for i in range(174457, 174505 +1):
    m=set()
    for d in range(2, int(i**0.5)+1):
        if i%d==0:
            m.add(d)
            m.add(i//d) 
    if len(m)==2:
        print(*m)

'''Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [110203; 110245], 
числа, имеющие ровно четыре различных чётных натуральных делителя 
(при этом количество нечётных делителей может быть любым). 
Для каждого найденного числа запишите эти четыре делителя в четыре соседних столбца на экране с новой строки. 
Делители в строке должны следовать в порядке возрастания.
'''


for i in range(110203, 110245 +1):
    m=set()
    for d in range(1, int(i**0.5)+1):
        if i%d==0:              # x = 16     d = 1  16//1 = 16
            if d%2 == 0:
                m.add(d)
            if (i//d)%2 == 0:
                m.add(i//d) 
    if len(m)==4:
        print(m)


'''Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [84052; 84130], 
число, имеющее максимальное количество различных натуральных делителей, 
если таких чисел несколько — найдите минимальное из них. 
Выведите на экран количество делителей такого числа и само число.
'''

mx=0
c=0
for i in range(84052, 84130 + 1):
    m=set()
    for d in range(1, int(i**0.5) + 1):
        if i%d==0:             
            m.add(d)
            m.add(i//d) 
    if len(m)> mx:
        mx=len(m)
        c=i       
    print(mx, c)


'''Найдите все натуральные числа N, принадлежащие отрезку [200 000 000; 400 000 000], 
которые можно представить в виде N = 2**m · 3**n, где m — чётное число, 
n — нечётное число. B ответе запишите все найденные числа в порядке возрастания.
'''
s = set()
for n in range(1, 30, 2):
    for m in range(2, 30, 2):
        N = 2**m * 3**n
        if 200_000_000 <= N <= 400_000_000:
            s.add(N)
print(*s)


'''Пусть M — сумма минимального и максимального натуральных делителей целого числа, 
не считая единицы и самого числа. Если таких делителей у числа нет, то считаем значение M равным нулю.
Напишите программу, которая перебирает целые числа, большие 452 021, 
в порядке возрастания и ищет среди них такие, для которых значение M при делении на 7 даёт в остатке 3. 
Вывести первые 5 найденных чисел и соответствующие им значения M.

Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число, 
затем — значение M. Строки выводятся в порядке возрастания найденных чисел.

Количество строк в таблице для ответа избыточно. '''

c = 0

for i in range(452_022, 1_000_000):
    m=set()
    for d in range(2, int(i**0.5)+1):
        if i%d==0:
            m.add(d)
            m.add(i//d)
    if len(m) != 0:
        if (min(m)+max(m))%7==3:
            print(i, (min(m)+max(m)))
            c += 1
            if c == 5:
                break



'''Пусть M (N) — пятый по величине делитель натурального числа N без учёта самого числа и единицы.

Если y числа N меньше 5 различных делителей, не считая единицы и самого числа, считаем, что M (N) = 0.

Найдите 5 наименьших натуральных чисел, превышающих 300_000_000, для которых M (N) > 0. 
B ответе запишите найденные значения M (N) в порядке возрастания соответствующих им чисел N.


17
1119403
151
16666667
27272728
'''

c = 0

for i in range(300_000_001, 400_000_000):
    m=set()
    for d in range(2, int(i**0.5)+1):
        if i%d==0:
            m.add(d)
            m.add(i//d)
    if len(m) >= 5:
        print(sorted(m)[-5])
        c += 1
        if c == 5:
            break
         


'''Найдите 5 чисел, больших 500 000, таких, что среди их делителей есть число, 
оканчивающееся на 8, при этом этот делитель не равен 8 и самому числу. 
В качестве ответа приведите 5 наименьших чисел, соответствующих условию.

Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число, 
затем минимальный делитель, оканчивающийся на 8, не равный 8 и самому числу.
'''

c = 0
 
for i in range(500_001, 600_000):
    m=set()
    for d in range(2, int(i**0.5)+1):
        if i%d==0:
            m.add(d)
            m.add(i//d)
    m = sorted(m)
    for y in m:
        if y%10==8 and y!=8:     
            print(i, y)
            c+=1
            break
    if c == 5:
        break
         

'''Найдите 5 чисел, больших 500 000, таких, что среди их делителей есть число, 
оканчивающееся на 8, при этом этот делитель не равен 8 и самому числу. 
В качестве ответа приведите 5 наименьших чисел, соответствующих условию.

Формат вывода: для каждого из 5 таких найденных чисел в отдельной строке сначала выводится само число, 
затем минимальный делитель, оканчивающийся на 8, не равный 8 и самому числу.
'''

c = 0
 
for i in range(500_001, 600_000):
    for d in range(18, i, 10):
        if i%d==0:
            print(i, d)
            c += 1
            break
    if c == 5:
        break
   


'''Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:

— символ «?» означает ровно одну произвольную цифру;
— символ «*» означает любую последовательность цифр произвольной длины;
 в том числе «*» может задавать и пустую последовательность.

Например, маске 123*4?5 соответствуют числа 123405 и 12300405.

Среди натуральных чисел, не превышающих 10**9, найдите все числа, соответствующие маске 12345?7?8, 
делящиеся на число 23 без остатка.

В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, 
а во втором столбце  — соответствующие им результаты деления этих чисел на 23.

Количество строк в таблице для ответа избыточно.
'''

from fnmatch import *

for i in range(0, 10**9, 23):
    if fnmatch(str(i), '12345?7?8') == True:
        print(i, i//23)


'''Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:

— символ «?» означает ровно одну произвольную цифру;
— символ «*» означает любую последовательность цифр произвольной длины; 
в том числе «∗» может задавать и пустую последовательность.

Например, маске 123*4?5 соответствуют числа 123405 и 12300405.

Найдите все натуральные числа, не превосходящие 10**10, для которых выполнены все условия:

— соответствуют маске 3?1*57;
— делятся на 2031 и на 23 без остатка.
- количество делителей этого числа является степенью двойки;

В ответе запишите в первом столбце таблицы все найденные числа в порядке

возрастания, справа от каждого числа их частное от деления на 2031.'''

from fnmatch import *

def count_del(x):
    m = set()
    m.add(x)
    for g in range(1,x//2+1):
        if x%g==0:
            m.add(g)
    return len(m)

st = []
for h in range(0,30):
    st.append(2**h)

for i in range(0, 10**10, 2031):
    if i%23==0:
        if fnmatch(str(i), '3?1*57')==True:
            if count_del(i) in st:
                print(i, i//2031)



'''Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:

— символ «?» означает ровно одну произвольную цифру;
— символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую 
последовательность.

Например, маске 123*4?5 соответствуют числа 123405 и 12300405.

Найдите все натуральные числа, не превосходящие 10**9, для которых выполнены все условия:

— соответствуют маске *31*65?;
— делятся на 31 и 2031 без остатка;
— количество делителей числа является результатом любой степени двойки.

В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, справа от каждого числа их 
частное от деления на 2031.
'''

from fnmatch import *

def f(b):
    n=set()
    for i in range(1, int(b**0.5)+1):
        if b%i == 0:
            n.add(b//i)
            n.add(i)
    return len(n)

k2 = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096]

for i in range(0, 10**9+1, 2031):
    if i%31==0:
        if f(i) in k2:
           if fnmatch(str(i), "*31*65?")==True: 
                print(i, i//2031)


'''
Найдите все натуральные числа, принадлежащие отрезку [101_000_000, 102_000_000], у которых ровно три различных 
чётных делителя (при этом количество нечётных делителей может быть любым). В ответе перечислите найденные числа 
в порядке возрастания.
'''
def f(n):
    m=set()
    for i in range(1, int(n**0.5)+1):
        if n%i==0:
            if i%2==0:
                m.add(i)
            if (n//i)%2==0:
                m.add(n//i)
        if len(m) >= 4:
            break     
    return m

for g in range(101_000_000, 102_000_000):
    mas = f(g)
    if len(mas)==3:
        print(g)




'''Назовём маской числа последовательность цифр, в которой также могут встречаться такие символы:

    «?» — ровно одна произвольная цифра
    «*» — любая последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность

Например, маске 123*4?5 соответствуют числа 123405 и 12300405.

Среди натуральных чисел, не превышающих 10**10, найдите все, соответствующие маске 17*023?9, у которых при этом сумма всех цифр кратна 11.

В ответе запишите в первом столбце таблицы пять наибольших найденных чисел в порядке возрастания, а во втором столбце
— соответствующие им результаты деления суммы всех цифр на 11.
'''
m = []
for i in '0123456789':
    for z in range(0, 1000):
        ch = '17' + str(z) + '023' + i + '9'
        k=list(ch)
        u=[int(i) for i in k]
        sm=sum(u)
        if sm%11 == 0:
            m.append([int(ch),sm/11])

for i in '0123456789':
    for z in range(0, 4):
        ch = '17' + '0'*z + '023' + i + '9'
        k=list(ch)
        u=[int(i) for i in k]
        sm=sum(u)
        if sm%11 == 0:
            m.append([int(ch),sm/11])

m.sort()

print(m[-5:])