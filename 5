'''На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1.  Строится двоичная запись числа N.
2.  К этой записи дописываются справа ещё два разряда по следующему правилу:
а)  складываются все цифры двоичной записи, и остаток от деления суммы на 2 дописывается в конец числа (справа). Например, запись 11100 преобразуется в запись 111001;
б)  над этой записью производятся те же действия  — справа дописывается остаток от деления суммы цифр на 2.

Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью искомого числа R.
Укажите минимальное число R, которое превышает 43 и может являться результатом работы алгоритма. В ответе это число запишите в десятичной системе.'''


for i in range(1, 1000):
    r = bin(i)[2:]
    r = r + str(r.count('1')%2)
    r = r + str(r.count('1')%2)
    r = int(r, 2)
    if r > 43:
        print(r)
        break




'''Автомат обрабатывает натуральное число N > 1 по следующему алгоритму.

1.  Строится двоичная запись числа N.
2.  Последняя цифра двоичной записи удаляется.
3.  Если исходное число N было нечётным, в конец записи (справа) дописываются цифры 10, если чётным  — 01.
4.  Результат переводится в десятичную систему и выводится на экран.

Какое число нужно ввести в автомат, чтобы в результате получилось 2018?
'''


for i in range(2,100000):
    R=bin(i)[2:]
    R=R[:-1]
    if i%2 ==0:
        R+= "01"
    else:
        R+="10"
    R=int(R,2)
    if R == 2018:
        print (i)
        break



'''Автомат обрабатывает натуральное число N по следующему алгоритму.

1.  Строится двоичная запись числа N.
2.  Удаляется первая слева единица и все следующие непосредственно за ней нули. Если после этого в числе не остаётся цифр, результат этого действия считается равным нулю.
3.  Полученное число переводится в десятичную запись.
4.  Новое число вычитается из исходного, полученная разность выводится на экран.

Сколько разных значений будет показано на экране автомата при последовательном вводе всех натуральных чисел от 10 до 1000?
'''

# m = set()
# m.add(8)
# m.add(10)
# print(m)


q = set()

for i in range (10,1001):
  r=bin(i)[2:]
  r=r[1:]
  r=int(r,2) 
  t=i-r
  q.add(t)
print(q)





'''Автомат обрабатывает натуральное число N по следующему алгоритму:

1.  Строится двоичная запись числа N.
2.  Запись «переворачивается», то есть читается справа налево. Если при этом появляются ведущие нули, они отбрасываются.
3.  Полученное число переводится в десятичную запись и выводится на экран.

Какое наименьшее число, превышающее 100, может получиться в результате работы автомата?
'''

for i in range (10,1001):
  r=bin(i)[2:]
  r=r[::-1]
  r=int(r,2) 
  if r > 100:
    print(r)




'''Алгоритм получает на вход натуральное число N > 1 и строит по нему новое число R следующим образом:

1.  Строится двоичная запись числа N.
2.  Вычисляется количество единиц, стоящих на чётных местах в двоичной записи числа N без ведущих нулей, и количество нулей, 
стоящих на нечётных местах. Места отсчитываются слева направо (от старших разрядов к младшим, начиная с единицы).
3.  Результатом работы алгоритма становится модуль разности полученных двух чисел.

Пример. Дано число N  =  39. Алгоритм работает следующим образом:

1.  Строится двоичная запись: 39(10)  =  100111(2).
2.  Выделяем единицы на чётных и нули на нечётных местах: 100111. На чётных местах стоят две единицы, на нечётных  — один ноль.
3.  Модуль разности равен 1.
Результат работы алгоритма R  =  1.

При каком наименьшем N в результате работы алгоритма получится R  =  4?системе счисления.
'''

# s = '10101011'
# s = s[1::2]
# s=s.count('1')


for i in range (2,1001):
  r=bin(i)[2:]

  chet = r[1::2].count('1')
  n_chet = r[::2].count('0')

  a = abs(chet - n_chet)

  if a == 4:
    print(i)
    break


# r = '12345678'

# r = r[::2]




# Функция для перевода числа n из десятичной системы в троичную
def tr(n):
    t = ''
    while n > 0:
        r = n % 3               # Остаток от деления на 3 — следующая цифра троичной системы
        t = t + str(r)          # Добавляем цифру в строку, строя число справа налево
        n = n // 3              # Переходим к следующему разряду делением на 3
    return t[::-1]              # Переворачиваем строку, чтобы получить правильный порядок троичного числа

# Инициализируем пустой список для хранения подходящих чисел
mn = []

# Проходим по всем натуральным числам от 1 до 100000
for n in range(1, 100000):
    # Переводим число n в троичную систему
    r = tr(n)

    # Заменяем цифры по условию:
    # 1 становится 2, 0 становится 1, 2 становится 0
    r = r.replace('1', '*').replace('0', '&').replace('2', '0').replace('*', '2').replace("&", "1")
    
    # Преобразуем строку r в целое число, чтобы избавиться от незначащих нулей, и обратно в строку
    r = int(r)  # преобразуем к числу
    r = str(r)  # возвращаем обратно в строку

    # Переворачиваем запись справа налево
    r = r[::-1]

    # Считаем сумму цифр в новом числе r, используя заменённые цифры
    su = r.count('2') * 2 + r.count('1')  # сумма цифр: 2 * количество двоек + количество единиц

    # Конвертируем сумму su в троичную систему и добавляем к числу справа
    r = r + tr(su)

    # Проверяем, если значение R (в десятичной системе) больше 10**4
    if int(r, 3) > 10**4:
        mn.append(int(r, 3))  # Добавляем число R в список, если оно больше 10**4

# Выводим минимальное значение R из списка
print(min(mn))